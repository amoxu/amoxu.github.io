{"pages":[],"posts":[{"title":"Hexo 部署到 Github","text":"Hexo 部署到 Github安装hexo-deployer-git插件1npm install hexo-deployer-git --save 配置文件./_config.yml下修改,注意：地址为你clone的地址，ssh对应需要ssh-key，https需要在地址上配置账号和http-password.123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:amoxuk/amoxuk.github.io.git branch: master 发布1hexo d -g 修改ICO（页面图标）放置一张合适的图标图片到.\\themes\\你当前使用的主题\\source下面，修改配置文件，路径：.\\themes\\你当前使用的主题\\_config.yml1favicon: /favicon.ico 如果文件名字为：favicon.ico，则不需要任何配置，自动部署就生效。","link":"/2019/03/04/amo/"},{"title":"浏览器反调试","text":"浏览器反调试代码使用定时器和debugger以及时间对比实现的反调试功能12345678910111213141516171819setTimeout(function() { var s = new Date().valueOf(); try { (function z() { debugger ;z(); } )(); } catch (e) {} if ((new Date().valueOf() &lt; s) || (new Date().valueOf() - s) &gt; 1094) { var H2eeee = 2; while (H2eeee !== 1) { switch (H2eeee) { case 2: H2eeee = 1; break; } } }}, 0);","link":"/2019/03/08/浏览器反调试/"},{"title":"","text":"var net = require('net'); var port = 57612; var host = '127.0.0.1'; var client = new net.Socket(); //创建socket客户端 //连接到服务端 client.connect(port, host, function () { client.write('hello server'); //向端口写入数据到达服务端 }); client.on('data', function (data) { console.log('from server:' + data); //得到服务端返回来的数据 }); client.on('error', function (error) { //错误出现之后关闭连接 console.log('error:' + error); client.destory(); }); client.on('close', function () { //正常关闭连接 console.log('Connection closed'); });","link":"/2019/06/12/client/"},{"title":"opencv 查找正方形","text":"opencv 查找正方形12345678910111213141516171819202122232425262728293031323334353637383940414243def findRect(): import cv2 import numpy as np # img = cv2.pyrDown(cv2.imread(\"titlename.png\", cv2.IMREAD_UNCHANGED)) img = cv2.imread(\"titlename.png\", cv2.IMREAD_UNCHANGED) ret, thresh = cv2.threshold(cv2.cvtColor(img.copy(), cv2.COLOR_BGR2GRAY), 127, 255, cv2.THRESH_BINARY) contours, hier = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE) # python3 3个返回值 # _, contours, hier = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE) for c in contours: # find bounding box coordinates x, y, w, h = cv2.boundingRect(c) if 360 != w and h != 96: continue else: print x, y, w, h cv2.rectangle(img, (x, y), (x + w, y + h), (0, 255, 0), 2) # find minimum area rect = cv2.minAreaRect(c) # calculate coordinates of the minimum area rectangle box = cv2.boxPoints(rect) # normalize coordinates to integers box = np.int0(box) print box # draw contours cv2.drawContours(img, [box], 0, (0, 0, 255), 3) # calculate center and radius of minimum enclosing circle # (x, y), radius = cv2.minEnclosingCircle(c) # cast to integers # center = (int(x), int(y)) # radius = int(radius) # draw the circle # img = cv2.circle(img, center, radius, (0, 255, 0), 2) cv2.drawContours(img, contours, -1, (255, 0, 0), 1) cv2.imshow(\"contours \", img) cv2.waitKey() cv2.destroyAllWindows()","link":"/2019/06/12/opencv 查找正方形/"}],"tags":[],"categories":[]}